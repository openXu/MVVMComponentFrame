package com.openxu.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.openxu.db.bean.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD".
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "WORD";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property First = new Property(1, String.class, "first", false, "FIRST");
        public final static Property English = new Property(2, String.class, "english", false, "ENGLISH");
        public final static Property Level = new Property(3, String.class, "level", false, "LEVEL");
        public final static Property IsLocal = new Property(4, String.class, "isLocal", false, "IS_LOCAL");
        public final static Property Love = new Property(5, String.class, "love", false, "LOVE");
        public final static Property IsError = new Property(6, String.class, "isError", false, "IS_ERROR");
        public final static Property Remenber = new Property(7, String.class, "remenber", false, "REMENBER");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
        public final static Property Exchange = new Property(9, String.class, "exchange", false, "EXCHANGE");
        public final static Property Ph_en = new Property(10, String.class, "ph_en", false, "PH_EN");
        public final static Property Ph_en_mp3 = new Property(11, String.class, "ph_en_mp3", false, "PH_EN_MP3");
        public final static Property Ph_am = new Property(12, String.class, "ph_am", false, "PH_AM");
        public final static Property Ph_am_mp3 = new Property(13, String.class, "ph_am_mp3", false, "PH_AM_MP3");
        public final static Property Parts = new Property(14, String.class, "parts", false, "PARTS");
        public final static Property Sents = new Property(15, String.class, "sents", false, "SENTS");
        public final static Property AddDate = new Property(16, String.class, "addDate", false, "ADD_DATE");
        public final static Property FxDate = new Property(17, String.class, "fxDate", false, "FX_DATE");
        public final static Property Fx = new Property(18, String.class, "fx", false, "FX");
    }


    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"FIRST\" TEXT," + // 1: first
                "\"ENGLISH\" TEXT," + // 2: english
                "\"LEVEL\" TEXT," + // 3: level
                "\"IS_LOCAL\" TEXT," + // 4: isLocal
                "\"LOVE\" TEXT," + // 5: love
                "\"IS_ERROR\" TEXT," + // 6: isError
                "\"REMENBER\" TEXT," + // 7: remenber
                "\"DATE\" TEXT," + // 8: date
                "\"EXCHANGE\" TEXT," + // 9: exchange
                "\"PH_EN\" TEXT," + // 10: ph_en
                "\"PH_EN_MP3\" TEXT," + // 11: ph_en_mp3
                "\"PH_AM\" TEXT," + // 12: ph_am
                "\"PH_AM_MP3\" TEXT," + // 13: ph_am_mp3
                "\"PARTS\" TEXT," + // 14: parts
                "\"SENTS\" TEXT," + // 15: sents
                "\"ADD_DATE\" TEXT," + // 16: addDate
                "\"FX_DATE\" TEXT," + // 17: fxDate
                "\"FX\" TEXT);"); // 18: fx
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String first = entity.getFirst();
        if (first != null) {
            stmt.bindString(2, first);
        }
 
        String english = entity.getEnglish();
        if (english != null) {
            stmt.bindString(3, english);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(4, level);
        }
 
        String isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindString(5, isLocal);
        }
 
        String love = entity.getLove();
        if (love != null) {
            stmt.bindString(6, love);
        }
 
        String isError = entity.getIsError();
        if (isError != null) {
            stmt.bindString(7, isError);
        }
 
        String remenber = entity.getRemenber();
        if (remenber != null) {
            stmt.bindString(8, remenber);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
 
        String exchange = entity.getExchange();
        if (exchange != null) {
            stmt.bindString(10, exchange);
        }
 
        String ph_en = entity.getPh_en();
        if (ph_en != null) {
            stmt.bindString(11, ph_en);
        }
 
        String ph_en_mp3 = entity.getPh_en_mp3();
        if (ph_en_mp3 != null) {
            stmt.bindString(12, ph_en_mp3);
        }
 
        String ph_am = entity.getPh_am();
        if (ph_am != null) {
            stmt.bindString(13, ph_am);
        }
 
        String ph_am_mp3 = entity.getPh_am_mp3();
        if (ph_am_mp3 != null) {
            stmt.bindString(14, ph_am_mp3);
        }
 
        String parts = entity.getParts();
        if (parts != null) {
            stmt.bindString(15, parts);
        }
 
        String sents = entity.getSents();
        if (sents != null) {
            stmt.bindString(16, sents);
        }
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(17, addDate);
        }
 
        String fxDate = entity.getFxDate();
        if (fxDate != null) {
            stmt.bindString(18, fxDate);
        }
 
        String fx = entity.getFx();
        if (fx != null) {
            stmt.bindString(19, fx);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String first = entity.getFirst();
        if (first != null) {
            stmt.bindString(2, first);
        }
 
        String english = entity.getEnglish();
        if (english != null) {
            stmt.bindString(3, english);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(4, level);
        }
 
        String isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindString(5, isLocal);
        }
 
        String love = entity.getLove();
        if (love != null) {
            stmt.bindString(6, love);
        }
 
        String isError = entity.getIsError();
        if (isError != null) {
            stmt.bindString(7, isError);
        }
 
        String remenber = entity.getRemenber();
        if (remenber != null) {
            stmt.bindString(8, remenber);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
 
        String exchange = entity.getExchange();
        if (exchange != null) {
            stmt.bindString(10, exchange);
        }
 
        String ph_en = entity.getPh_en();
        if (ph_en != null) {
            stmt.bindString(11, ph_en);
        }
 
        String ph_en_mp3 = entity.getPh_en_mp3();
        if (ph_en_mp3 != null) {
            stmt.bindString(12, ph_en_mp3);
        }
 
        String ph_am = entity.getPh_am();
        if (ph_am != null) {
            stmt.bindString(13, ph_am);
        }
 
        String ph_am_mp3 = entity.getPh_am_mp3();
        if (ph_am_mp3 != null) {
            stmt.bindString(14, ph_am_mp3);
        }
 
        String parts = entity.getParts();
        if (parts != null) {
            stmt.bindString(15, parts);
        }
 
        String sents = entity.getSents();
        if (sents != null) {
            stmt.bindString(16, sents);
        }
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(17, addDate);
        }
 
        String fxDate = entity.getFxDate();
        if (fxDate != null) {
            stmt.bindString(18, fxDate);
        }
 
        String fx = entity.getFx();
        if (fx != null) {
            stmt.bindString(19, fx);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // first
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // english
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // isLocal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // love
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isError
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remenber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // exchange
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ph_en
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ph_en_mp3
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ph_am
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ph_am_mp3
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // parts
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sents
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // addDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // fxDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // fx
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirst(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnglish(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsLocal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLove(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsError(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemenber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExchange(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPh_en(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPh_en_mp3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPh_am(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPh_am_mp3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setParts(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSents(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAddDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFxDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFx(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Word entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
